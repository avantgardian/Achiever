name: ‚òï Advanced Caffeine Advisor

on:
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 9 * * 1-5'  # Weekday mornings

permissions:
  contents: read
  issues: write

jobs:
  caffeine-analysis:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install --prefer-offline 2>/dev/null || true

      - name: Debug git history
        run: |
          echo "=== GIT LOG DEBUG ==="
          echo "Current time: $(date)"
          echo "Last 10 commits:"
          git log --oneline -10
          echo ""
          echo "Commits in last 24 hours:"
          git log --since="24 hours ago" --oneline
          echo ""
          echo "All commits with numstat (last 5):"
          git log --numstat -5

      - name: Calculate caffeine prescription
        run: |
          cat > caffeine-calc.js << 'EOF'
          const { execSync } = require('child_process');

          // ============================================
          // STEP 1: CALCULATE DEVELOPER ENERGY LEVEL
          // ============================================

          function getCommitMetrics() {
            try {
              const commits24h = execSync('git log --since="24 hours ago" --oneline 2>/dev/null | wc -l').toString().trim();
              const commits7d = execSync('git log --since="7 days ago" --oneline 2>/dev/null | wc -l').toString().trim();
              const commits30d = execSync('git log --since="30 days ago" --oneline 2>/dev/null | wc -l').toString().trim();
              
              return {
                commits24h: parseInt(commits24h) || 0,
                commits7d: parseInt(commits7d) || 0,
                commits30d: parseInt(commits30d) || 0
              };
            } catch (e) {
              return { commits24h: 0, commits7d: 0, commits30d: 0 };
            }
          }

          function getCodeMetrics() {
            try {
              // Parse git numstat output in JavaScript instead of awk
              function calculateLOC(gitLogOutput) {
                let totalLOC = 0;
                const lines = gitLogOutput.split('\n').filter(l => l.trim());
                
                for (const line of lines) {
                  // numstat format: additions<tab>deletions<tab>filename
                  const parts = line.split('\t');
                  if (parts.length >= 2) {
                    const additions = parseInt(parts[0]) || 0;
                    const deletions = parseInt(parts[1]) || 0;
                    totalLOC += Math.abs(additions - deletions);
                  }
                }
                return totalLOC;
              }
              
              // Get commits from last 24 hours
              let raw24h = '';
              try {
                raw24h = execSync(`git log --since="24 hours ago" --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
              } catch (e) {
                raw24h = '';
              }
              
              let locToday = calculateLOC(raw24h);
              
              // Fallback: if no 24h data, use last 20 commits
              if (locToday === 0) {
                try {
                  raw24h = execSync(`git log -20 --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
                  locToday = calculateLOC(raw24h);
                } catch (e) {
                  locToday = 0;
                }
              }
              
              // Get commits from last 7 days
              let raw7d = '';
              try {
                raw7d = execSync(`git log --since="7 days ago" --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
              } catch (e) {
                raw7d = '';
              }
              
              let locWeek = calculateLOC(raw7d);
              
              // Fallback: if no 7d data, use all commits
              if (locWeek === 0) {
                try {
                  raw7d = execSync(`git log --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
                  locWeek = calculateLOC(raw7d);
                } catch (e) {
                  locWeek = 0;
                }
              }
              
              return {
                locToday: isNaN(locToday) || locToday < 0 ? 0 : locToday,
                locWeek: isNaN(locWeek) || locWeek < 0 ? 0 : locWeek
              };
            } catch (e) {
              return { locToday: 0, locWeek: 0 };
            }
          }

          // ============================================
          // STEP 2: CALCULATE ENERGY LEVEL (0-100)
          // ============================================

          function calculateEnergyLevel(commits24h, locToday) {
            let energy = 0;
            
            // Validate inputs
            commits24h = isNaN(commits24h) ? 0 : commits24h;
            locToday = isNaN(locToday) ? 0 : locToday;
            
            // Energy from commits (max 40 points)
            energy += Math.min(commits24h * 4, 40);
            
            // Energy from code output (max 40 points)
            energy += Math.min(locToday / 50, 40);
            
            // Rest factor (max 20 points) - assumes normal sleep
            energy += 20;
            
            return Math.min(Math.max(energy, 0), 100);
          }

          // ============================================
          // STEP 3: CALCULATE CAFFEINE NEEDS
          // ============================================

          function calculateCaffeinNeeds(energy, commits24h, locToday, commits7d) {
            let baseCaffeine = 0;

            // Low energy = needs MORE caffeine to compensate
            if (energy < 30) {
              baseCaffeine = 300; // Heavy dose
            } else if (energy < 50) {
              baseCaffeine = 200; // Moderate dose
            } else if (energy < 70) {
              baseCaffeine = 100; // Light dose
            } else {
              baseCaffeine = 50; // Minimal
            }

            // Add caffeine based on lines of code
            const locBonus = Math.min(locToday / 100, 50);
            
            // Add caffeine based on burnout risk (high commit rate 7d)
            const burnoutRisk = commits7d > 70 ? 75 : commits7d > 40 ? 25 : 0;

            const totalCaffeine = baseCaffeine + locBonus + burnoutRisk;

            return {
              baseCaffeine,
              locBonus,
              burnoutRisk,
              totalCaffeine: Math.round(totalCaffeine)
            };
          }

          // ============================================
          // STEP 4: CAFFEINE PRODUCT DATABASE
          // ============================================

          const caffeinProducts = {
            espresso: { mg: 63, serving: "1 shot (1 oz)", emoji: "‚òï", cost: "$2.50" },
            americano: { mg: 150, serving: "1 cup (12 oz)", emoji: "‚òï", cost: "$3.50" },
            latte: { mg: 75, serving: "1 cup (12 oz)", emoji: "ü•õ", cost: "$4.00" },
            cappuccino: { mg: 75, serving: "1 cup (12 oz)", emoji: "ü•õ", cost: "$4.00" },
            drip_coffee: { mg: 95, serving: "1 cup (8 oz)", emoji: "‚òï", cost: "$1.50" },
            french_press: { mg: 80, serving: "1 cup (8 oz)", emoji: "‚òï", cost: "$2.00" },
            black_tea: { mg: 45, serving: "1 cup (8 oz)", emoji: "üçµ", cost: "$1.00" },
            green_tea: { mg: 25, serving: "1 cup (8 oz)", emoji: "üçµ", cost: "$1.00" },
            matcha: { mg: 70, serving: "1 cup (8 oz)", emoji: "üçµ", cost: "$6.00" },
            energy_drink: { mg: 80, serving: "1 can (8.4 oz)", emoji: "‚ö°", cost: "$2.00" },
            energy_shot: { mg: 200, serving: "1 shot (2 oz)", emoji: "üíâ", cost: "$3.00" },
            chocolate: { mg: 12, serving: "1 oz square", emoji: "üç´", cost: "$1.00" },
            diet_coke: { mg: 46, serving: "1 can (12 oz)", emoji: "ü•§", cost: "$1.50" },
            mountain_dew: { mg: 54, serving: "1 can (12 oz)", emoji: "ü•§", cost: "$1.50" },
            cola: { mg: 34, serving: "1 can (12 oz)", emoji: "ü•§", cost: "$1.50" },
            cold_brew: { mg: 150, serving: "1 cup (8 oz)", emoji: "üßä‚òï", cost: "$4.00" },
            espresso_martini: { mg: 126, serving: "1 cocktail (2 oz)", emoji: "üçπ", cost: "$8.00" },
            iced_latte: { mg: 75, serving: "1 cup (12 oz)", emoji: "üßä", cost: "$4.50" },
            nitro_cold_brew: { mg: 280, serving: "1 cup (8 oz)", emoji: "üßä‚òïüí™", cost: "$5.00" }
          };

          // ============================================
          // STEP 5: GENERATE RECOMMENDATIONS
          // ============================================

          function getRecommendations(caffeineMg) {
            const recommendations = [];
            let remainingCaffeine = caffeineMg;

            // Smart algorithm: prioritize efficient options
            const prioritized = [
              'nitro_cold_brew', 'energy_shot', 'cold_brew', 'americano', 
              'espresso', 'matcha', 'energy_drink', 'black_tea', 'drip_coffee'
            ];

            for (const product of prioritized) {
              if (remainingCaffeine <= 0) break;
              
              const item = caffeinProducts[product];
              const servings = Math.ceil(remainingCaffeine / item.mg);
              
              if (servings > 0) {
                recommendations.push({
                  product,
                  servings,
                  totalMg: servings * item.mg,
                  serving: item.serving,
                  emoji: item.emoji,
                  cost: item.cost
                });
                
                remainingCaffeine -= servings * item.mg;
              }
            }

            return recommendations;
          }

          // ============================================
          // MAIN CALCULATION
          // ============================================

          const commits = getCommitMetrics();
          const code = getCodeMetrics();

          const energy = calculateEnergyLevel(commits.commits24h, code.locToday);
          const caffeine = calculateCaffeinNeeds(energy, commits.commits24h, code.locToday, commits.commits7d);
          const recommendations = getRecommendations(caffeine.totalCaffeine);

          // ============================================
          // OUTPUT RESULTS
          // ============================================

          console.log(JSON.stringify({
            energy: Math.round(energy),
            caffeineMg: caffeine.totalCaffeine,
            commits24h: commits.commits24h,
            commits7d: commits.commits7d,
            commits30d: commits.commits30d,
            locToday: code.locToday,
            locWeek: code.locWeek,
            caffeineMgBreakdown: {
              base: caffeine.baseCaffeine,
              locBonus: Math.round(caffeine.locBonus),
              burnoutRisk: caffeine.burnoutRisk
            },
            recommendations: recommendations.map(r => ({
              product: r.product,
              servings: r.servings,
              totalMg: r.totalMg,
              serving: r.serving,
              emoji: r.emoji,
              cost: r.cost
            }))
          }, null, 2));

          EOF

          node caffeine-calc.js > caffeine-report.json
          cat caffeine-report.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub issue with recommendations
        run: |
          cat > create-issue.js << 'EOF'
          const fs = require('fs');
          const { execSync } = require('child_process');

          const data = JSON.parse(fs.readFileSync('caffeine-report.json', 'utf8'));

          // Build markdown report
          let markdown = `# ‚òï Caffeine Prescription Report

## üìä Energy Status

**Energy Level:** ${data.energy}/100
${data.energy >= 80 ? 'üî• EXCELLENT - You are thriving!' : 
  data.energy >= 60 ? 'üü¢ GOOD - Stable' : 
  data.energy >= 40 ? 'üü° LOW - Needs attention' : 
  'üî¥ CRITICAL - You need REST'}

---

## üìà Development Activity (Last 24h / Last 7d)

| Metric | 24h | 7d |
|--------|-----|-----|
| **Commits** | ${data.commits24h} | ${data.commits7d} |
| **Lines Changed** | ${data.locToday} | ${data.locWeek} |
| **Avg Lines/Commit** | ${data.locToday > 0 ? Math.round(data.locToday / Math.max(data.commits24h, 1)) : 0} | ${data.locWeek > 0 ? Math.round(data.locWeek / Math.max(data.commits7d, 1)) : 0} |

---

## ‚òï Caffeine Prescription

**Recommended:** ${data.caffeineMg}mg total
- Base need: ${data.caffeineMgBreakdown.base}mg
- From code output: +${data.caffeineMgBreakdown.locBonus}mg
- Burnout risk: +${data.caffeineMgBreakdown.burnoutRisk}mg

### üíä Product Recommendation${data.recommendations.length === 1 ? '' : 's'}

${data.recommendations.length === 0 ? '**No caffeine needed!** Go drink water and take a walk.' : 
  data.recommendations.map((r, i) => `
**Option ${i + 1}:** ${r.emoji} ${r.product.replace(/_/g, ' ').toUpperCase()}
- ${r.servings} √ó ${r.serving}
- ${r.totalMg}mg caffeine | ${r.cost}`).join('\n\n')}

---

${data.energy < 30 ? 
  '### üö® YOU NEED SLEEP\nSeriously, caffeine won\'t help. Get 8 hours of rest.' :
  data.energy < 50 ?
  '### üò¥ Take a Nap First\nConsider a 20-minute nap before the caffeine.' :
  data.energy < 70 ?
  '### ‚úÖ Moderate Boost\nCaffeine + walk + water will keep you productive.' :
  '### üî• Already Strong\nLight caffeine optional. Stay hydrated.'}

${data.commits7d > 70 ? '\n**‚ö†Ô∏è Burnout Alert:** You\'ve averaged ' + Math.round(data.commits7d / 7) + ' commits/day. Consider slowing down!' : ''}

---

**Generated:** ${new Date().toLocaleString()}
`;

          // Execute gh cli
          fs.writeFileSync('caffeine-report.md', markdown);
          
          const title = `‚òï Caffeine Prescription for ${process.env.GITHUB_ACTOR}`;
          const cmd = `gh issue create --title "${title}" --body-file caffeine-report.md`;
          
          console.error('Attempting to create issue with gh cli...');
          console.error('Title:', title);
          console.error('GH_TOKEN set:', !!process.env.GH_TOKEN);
          console.error('GITHUB_ACTOR:', process.env.GITHUB_ACTOR);
          
          try {
            const result = execSync(cmd, { encoding: 'utf-8' });
            console.error('‚úÖ Issue created successfully');
            console.error('Result:', result);
          } catch (e) {
            console.error('‚ùå Error creating issue:');
            console.error('Command:', cmd);
            console.error('Error:', e.message);
            console.error('Stderr:', e.stderr ? e.stderr.toString() : 'N/A');
            console.error('But report was still generated in caffeine-report.md');
          }

          EOF

          node create-issue.js
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Display report in console
        if: always()
        run: |
          echo "üìä CAFFEINE PRESCRIPTION REPORT"
          echo "=============================="
          cat caffeine-report.json | jq '.'
