name: CI & Caffeine Advisor

# Run on pushes to main and on all pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    
    # Set up PostgreSQL service for backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: achiever_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    # Environment variables for the job
    env:
      DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/achiever_test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd achiever-api && npm ci

      - name: Run database migrations
        run: cd achiever-api && npx prisma migrate deploy

      - name: Seed test database
        run: cd achiever-api && node seed-test-data.js

  linter:
    name: Run Linter
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd achiever-api && npm ci

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    
    # Set up PostgreSQL service for backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: achiever_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    # Environment variables for the job
    env:
      DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/achiever_test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd achiever-api && npm ci

      - name: Run database migrations
        run: cd achiever-api && npx prisma migrate deploy

      - name: Seed test database
        run: cd achiever-api && node seed-test-data.js

      - name: Run unit tests
        run: npm run test:unit

  e2e-tests:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    
    # Set up PostgreSQL service for backend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: achiever_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    # Environment variables for the job
    env:
      DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/achiever_test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Install backend dependencies
        run: cd achiever-api && npm ci

      - name: Run database migrations
        run: cd achiever-api && npx prisma migrate deploy

      - name: Seed test database
        run: cd achiever-api && node seed-test-data.js

      - name: Install Playwright browsers
        run: npx playwright install chromium firefox --with-deps

      - name: Run Playwright tests
        run: npm run test:e2e

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  caffeine-advisor:
    name: Caffeine Advisor
    runs-on: ubuntu-latest
    needs: [linter, unit-tests, e2e-tests]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: npm install --prefer-offline 2>/dev/null || true

      - name: Calculate caffeine prescription
        run: |
          cat > caffeine-calc.js << 'EOF'
          const { execSync } = require('child_process');

          // ============================================
          // STEP 1: CALCULATE DEVELOPER ENERGY LEVEL
          // ============================================

          function getCommitMetrics() {
            try {
              const commits24h = execSync('git log --since="24 hours ago" --oneline 2>/dev/null | wc -l').toString().trim();
              const commits7d = execSync('git log --since="7 days ago" --oneline 2>/dev/null | wc -l').toString().trim();
              const commits30d = execSync('git log --since="30 days ago" --oneline 2>/dev/null | wc -l').toString().trim();
              
              return {
                commits24h: parseInt(commits24h) || 0,
                commits7d: parseInt(commits7d) || 0,
                commits30d: parseInt(commits30d) || 0
              };
            } catch (e) {
              return { commits24h: 0, commits7d: 0, commits30d: 0 };
            }
          }

          function getCodeMetrics() {
            try {
              // Parse git numstat output in JavaScript instead of awk
              function calculateLOC(gitLogOutput) {
                let totalLOC = 0;
                const lines = gitLogOutput.split('\n').filter(l => l.trim());
                
                for (const line of lines) {
                  // numstat format: additions<tab>deletions<tab>filename
                  const parts = line.split('\t');
                  if (parts.length >= 2) {
                    const additions = parseInt(parts[0]) || 0;
                    const deletions = parseInt(parts[1]) || 0;
                    totalLOC += Math.abs(additions - deletions);
                  }
                }
                return totalLOC;
              }
              
              // Get commits from last 24 hours
              let raw24h = '';
              try {
                raw24h = execSync(`git log --since="24 hours ago" --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
              } catch (e) {
                raw24h = '';
              }
              
              let locToday = calculateLOC(raw24h);
              
              // Fallback: if no 24h data, use last 20 commits
              if (locToday === 0) {
                try {
                  raw24h = execSync(`git log -20 --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
                  locToday = calculateLOC(raw24h);
                } catch (e) {
                  locToday = 0;
                }
              }
              
              // Get commits from last 7 days
              let raw7d = '';
              try {
                raw7d = execSync(`git log --since="7 days ago" --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
              } catch (e) {
                raw7d = '';
              }
              
              let locWeek = calculateLOC(raw7d);
              
              // Fallback: if no 7d data, use all commits
              if (locWeek === 0) {
                try {
                  raw7d = execSync(`git log --numstat --pretty=""`, { encoding: 'utf-8' }).toString();
                  locWeek = calculateLOC(raw7d);
                } catch (e) {
                  locWeek = 0;
                }
              }
              
              return {
                locToday: isNaN(locToday) || locToday < 0 ? 0 : locToday,
                locWeek: isNaN(locWeek) || locWeek < 0 ? 0 : locWeek
              };
            } catch (e) {
              return { locToday: 0, locWeek: 0 };
            }
          }

          // ============================================
          // STEP 2: CALCULATE ENERGY LEVEL (0-100)
          // ============================================

          function calculateEnergyLevel(commits24h, locToday) {
            let energy = 0;
            
            // Validate inputs
            commits24h = isNaN(commits24h) ? 0 : commits24h;
            locToday = isNaN(locToday) ? 0 : locToday;
            
            // Energy from commits (max 40 points)
            energy += Math.min(commits24h * 4, 40);
            
            // Energy from code output (max 40 points)
            energy += Math.min(locToday / 50, 40);
            
            // Rest factor (max 20 points) - assumes normal sleep
            energy += 20;
            
            return Math.min(Math.max(energy, 0), 100);
          }

          // ============================================
          // STEP 3: CALCULATE CAFFEINE NEEDS
          // ============================================

          function calculateCaffeinNeeds(energy, commits24h, locToday, commits7d) {
            let baseCaffeine = 0;

            // Low energy = needs MORE caffeine to compensate
            if (energy < 30) {
              baseCaffeine = 300; // Heavy dose
            } else if (energy < 50) {
              baseCaffeine = 200; // Moderate dose
            } else if (energy < 70) {
              baseCaffeine = 100; // Light dose
            } else {
              baseCaffeine = 50; // Minimal
            }

            // Add caffeine based on lines of code
            const locBonus = Math.min(locToday / 100, 50);
            
            // Add caffeine based on burnout risk (high commit rate 7d)
            const burnoutRisk = commits7d > 70 ? 75 : commits7d > 40 ? 25 : 0;

            const totalCaffeine = baseCaffeine + locBonus + burnoutRisk;

            return {
              baseCaffeine,
              locBonus,
              burnoutRisk,
              totalCaffeine: Math.round(totalCaffeine)
            };
          }

          // ============================================
          // STEP 4: CAFFEINE PRODUCT DATABASE
          // ============================================

          const caffeinProducts = {
            espresso: { mg: 63, serving: "1 shot (1 oz)", emoji: "☕", cost: "$2.50" },
            americano: { mg: 150, serving: "1 cup (12 oz)", emoji: "☕", cost: "$3.50" },
            latte: { mg: 75, serving: "1 cup (12 oz)", emoji: "🥛", cost: "$4.00" },
            cappuccino: { mg: 75, serving: "1 cup (12 oz)", emoji: "🥛", cost: "$4.00" },
            drip_coffee: { mg: 95, serving: "1 cup (8 oz)", emoji: "☕", cost: "$1.50" },
            french_press: { mg: 80, serving: "1 cup (8 oz)", emoji: "☕", cost: "$2.00" },
            black_tea: { mg: 45, serving: "1 cup (8 oz)", emoji: "🍵", cost: "$1.00" },
            green_tea: { mg: 25, serving: "1 cup (8 oz)", emoji: "🍵", cost: "$1.00" },
            matcha: { mg: 70, serving: "1 cup (8 oz)", emoji: "🍵", cost: "$6.00" },
            energy_drink: { mg: 80, serving: "1 can (8.4 oz)", emoji: "⚡", cost: "$2.00" },
            energy_shot: { mg: 200, serving: "1 shot (2 oz)", emoji: "💉", cost: "$3.00" },
            chocolate: { mg: 12, serving: "1 oz square", emoji: "🍫", cost: "$1.00" },
            diet_coke: { mg: 46, serving: "1 can (12 oz)", emoji: "🥤", cost: "$1.50" },
            mountain_dew: { mg: 54, serving: "1 can (12 oz)", emoji: "🥤", cost: "$1.50" },
            cola: { mg: 34, serving: "1 can (12 oz)", emoji: "🥤", cost: "$1.50" },
            cold_brew: { mg: 150, serving: "1 cup (8 oz)", emoji: "🧊☕", cost: "$4.00" },
            espresso_martini: { mg: 126, serving: "1 cocktail (2 oz)", emoji: "🍹", cost: "$8.00" },
            iced_latte: { mg: 75, serving: "1 cup (12 oz)", emoji: "🧊", cost: "$4.50" },
            nitro_cold_brew: { mg: 280, serving: "1 cup (8 oz)", emoji: "🧊☕💪", cost: "$5.00" }
          };

          // ============================================
          // STEP 5: GENERATE RECOMMENDATIONS
          // ============================================

          function getRecommendations(caffeineMg) {
            const productKeys = Object.keys(caffeinProducts);
            const randomProduct = productKeys[Math.floor(Math.random() * productKeys.length)];
            const item = caffeinProducts[randomProduct];
            
            const servings = Math.ceil(caffeineMg / item.mg);
            
            return [{
              product: randomProduct,
              servings,
              totalMg: servings * item.mg,
              serving: item.serving,
              emoji: item.emoji,
              cost: item.cost
            }];
          }

          // ============================================
          // MAIN CALCULATION
          // ============================================

          const commits = getCommitMetrics();
          const code = getCodeMetrics();

          const energy = calculateEnergyLevel(commits.commits24h, code.locToday);
          const caffeine = calculateCaffeinNeeds(energy, commits.commits24h, code.locToday, commits.commits7d);
          const recommendations = getRecommendations(caffeine.totalCaffeine);

          // ============================================
          // OUTPUT RESULTS
          // ============================================

          console.log(JSON.stringify({
            energy: Math.round(energy),
            caffeineMg: caffeine.totalCaffeine,
            commits24h: commits.commits24h,
            commits7d: commits.commits7d,
            commits30d: commits.commits30d,
            locToday: code.locToday,
            locWeek: code.locWeek,
            caffeineMgBreakdown: {
              base: caffeine.baseCaffeine,
              locBonus: Math.round(caffeine.locBonus),
              burnoutRisk: caffeine.burnoutRisk
            },
            recommendations: recommendations.map(r => ({
              product: r.product,
              servings: r.servings,
              totalMg: r.totalMg,
              serving: r.serving,
              emoji: r.emoji,
              cost: r.cost
            }))
          }, null, 2));

          EOF

          node caffeine-calc.js > caffeine-report.json

      - name: Display report in console
        if: always()
        run: |
          cat > format-report.js << 'EOF'
          const fs = require('fs');
          const data = JSON.parse(fs.readFileSync('caffeine-report.json', 'utf8'));
          
          // Helper to pad lines to exactly 61 chars with proper emoji handling
          function padLine(content) {
            let width = 0;
            for (const char of content) {
              // Emojis and other wide chars are ~2 width, regular chars are 1
              width += (char.charCodeAt(0) > 127) ? 2 : 1;
            }
            const padding = Math.max(0, 59 - width);
            return content + ' '.repeat(padding);
          }
          
          console.log('\n');
          console.log('╔════════════════════════════════════════════════════════════╗');
          console.log('║          ☕ CAFFEINE PRESCRIPTION REPORT                    ║');
          console.log('╚════════════════════════════════════════════════════════════╝');
          console.log('');
          
          // Energy Status
          const energyStatus = data.energy >= 80 ? '🔥 EXCELLENT' : 
                               data.energy >= 60 ? '🟢 GOOD' : 
                               data.energy >= 40 ? '🟡 LOW' : '🔴 CRITICAL';
          console.log(`Energy Level: ${data.energy}/100 (${energyStatus})`);
          console.log('');
          
          // Metrics Table
          console.log('╔════════════════════════════════════════════════════════════╗');
          console.log('║            ☕ DEVELOPMENT ACTIVITY                          ║');
          console.log('╚════════════════════════════════════════════════════════════╝');
          console.log(padLine(`  Commits (24h)${' '.repeat(13)}${data.commits24h}`));
          console.log(padLine(`  Commits (7d)${' '.repeat(14)}${data.commits7d}`));
          console.log(padLine(`  Lines Changed (24h)${' '.repeat(7)}${data.locToday}`));
          console.log(padLine(`  Lines Changed (7d)${' '.repeat(8)}${data.locWeek}`));
          console.log(padLine(`  Avg Lines/Commit${' '.repeat(10)}${data.locToday > 0 ? Math.round(data.locToday / Math.max(data.commits24h, 1)) : 0}`));
          console.log('');
          
          // Caffeine Prescription
          console.log('╔════════════════════════════════════════════════════════════╗');
          console.log('║            ☕ CAFFEINE PRESCRIPTION                         ║');
          console.log('╚════════════════════════════════════════════════════════════╝');
          console.log(padLine(`  Total Recommended: ${data.caffeineMg}mg`));
          console.log(padLine(`    • Base need:${' '.repeat(20)}${data.caffeineMgBreakdown.base}mg`));
          console.log(padLine(`    • Code output bonus:${' '.repeat(12)}+${data.caffeineMgBreakdown.locBonus}mg`));
          console.log(padLine(`    • Burnout risk factor:${' '.repeat(10)}+${data.caffeineMgBreakdown.burnoutRisk}mg`));
          console.log('');
          
          // Recommendations
          console.log('╔════════════════════════════════════════════════════════════╗');
          console.log('║           ☕ PRODUCT RECOMMENDATIONS                        ║');
          console.log('╚════════════════════════════════════════════════════════════╝');
          if (data.recommendations.length === 0) {
            console.log(padLine('  No caffeine needed! Go drink water and take a walk.'));
          } else {
            data.recommendations.forEach((r, i) => {
              console.log(padLine(`  ${i + 1}. ${r.emoji} ${r.product.replace(/_/g, ' ').toUpperCase()}`));
              console.log(padLine(`     Amount: ${r.servings} × ${r.serving}`));
              console.log(padLine(`     Caffeine: ${r.totalMg}mg | Cost: ${r.cost}`));
            });
          }
          console.log('');
          EOF
          
          node format-report.js

